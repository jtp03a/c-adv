Interprocess Communication (IPC)
  Processes - a program in execution
    each process has own address space and usually one thread of control
    you can have multiple processes executing the same program
    each process has a copy of program in own address space and executes independently of other copies
    processes are organized hierarchically
      each process has a parent process which explicitly arranged to create it
    the processes created by a given process are called child processes and inherits from parent process
    each process has a process ID (PID)
    
    getpid() returns processID  of the calling process
    
    #include <sys/types.h>
    #include <unisstd.h>
    
    mypid = getpid();
    myppid = getppid(); //parent process id
    system("ps -f") //get processes running on the system
    
  System call - request for service that a program makes of the kernel
    service is genreally something only kernal has priv to do
    sometimes called kernel calls
    
  a process can be independent or co-operating
    IPC - talking to other processes
    can be between related procesess , parent <-> child
    can be between unrelated processes, separate unrelated programs
    
  IPC techniques
    pipes - same process, half duplix flow of data in only one direction
    named pipes - different processes, first in first out, full duplex
    message queues - process comm by posting and retrieving messages fromt the msg queue
    shared memeory - two process share some same memory space to comm
    sockets - comm over network generally, but can be used for IPC
    signals - source process sends a signal and destination process will handle
    
  Signals
    typically used in Unix like OS
    form of IPC
    notification to process indicating occurence of an event
    generated by system or user
    When a signal is sent, the OS interrupts the target proces normal flow of execution to deliver the signal
   
    Signal Flow - A process can receive a signal asynchronously
      after rx signal, process interupts current operations
        process has to stop whatever it is doing to deal with sig
          it will eitehr handle, ignore signal, or terminate program
          
    fixed signals defined by OS
    
    short message contains a single int value
    Examples: SIGTERM, SIGINT, SIGSTP, SIGONT
      illegal instructions, segmentation violations, termination orders, floating point exeception
      
    Term - the process with terminate
    Core - the process will terminate and produce a core dump file
    Ign - the process will ignore the signal
    Stop - the process will stop
    
 Raising Signals
  Can generate programatically
  #include <signal.h> is the signal handling library
  raise() sends sig to current process
    int raise(int sig) - if sucessful, specified sig generated, if unsucessfull returns a non-zero value
    can only send signal to program that contains it
    
    raise(SIGSTOP); //stops program, generated by ctrl-Z too, process is still running
    
    can send signal to continue
    
    from terminal
    
    get process id with ps
    
    kill -s SIGCONT <PID>
  
  alarm() - process can interrupt itself in the future, sets timer, when timer expires, process rx SIGALARM
    alarm(5); //5 ms alarm
    
    for (int i = 1; i < 10; i++) {
      printf("%d\n", i);
      sleep(1);
    }
    
    Program will execute for 5 seconds and then terminate
    
  kill() sends sig to specific process
  
Handling Signals
  
  
  
  
    
  
