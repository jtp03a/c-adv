Storage Classes
  describe the scope, visibility, and life-time of a variable
  
  life-time - period variable exists in computer memory
  scope - where variable can be ref in program
  visibility - for multi-file programs desc how variable can be shared/seen between files 
  
  C does not allow use of multiple storage classes

C provides 4 storage classes
  auto
  register
  extern
  static

Auto Variables
  automatic storage duration
  local variables declared in func body or block of code
  all local var have auto storage dur by default
  auto created when func is called, val local to func
  val of local var can only be accessed by func in which it was defined
  C compiler assumes any var defined inside a func is a auto local var
  keyword auto seldom used
  
External Variables
  tells that var defined elsewhere - not whithin same block as used
  global var
  main purpose - vars can be access between two diff files
  ref to global var that is visible to all program files
  in general global vars are not good program design practice
  
  how to use:
    declare  and initialize a variable in a module outside any function (global)
    
    int num = 0;
    
    in another file file use extern keyword
    
    extern int num;
    
  extern functions can be defined
    can use func in another file without declaring in a header file
    
    put extern in front of function prototype to declar that the func is in another file
    
Static variables
  when applied to local var instructs compiler to keep the var for lifetime of program
  when applied to global var instructs compiler to keep var scoped to file in which it was declared
  when applied to funcs func can only be called in same file
  
  local vars
    var val preserved in scope
    retain val between func call
    scope still local to func in which defined
    static var have default initial val of 0 unlike auto var with have no default init value
    static var are allocated on heap not stack
    must be a initialized using a constant value
    
  global vars
    if you need to define a global var whose val does not have to be accessed from another file use static
    
  functions
    extern is the default for functions
    static makes it usable only in same file
  
  structures
    dont use static vars in structs
    C compiler req that structure memory alloc be contiguous
    can have a static struct but no static members
    
Register
  processor register - small set of data holding places that are part of CPU
  register storage class is used to define local var that should be stored in CPU register instead of RAM
  makes use of register var much faster that var stored in RAM during runtime
  MIGHT be stored in register, up to compiler, dep on hardware
  local vars and param can be declared as register
  lifetime is same as local
  max size equal to reg size
  cannot obtain address with &
  
  register int x;
    
    
    
