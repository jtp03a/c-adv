C IO 
  stdin - standard input, normally associated with terminal window
  stdout - standar output, normally associated with termial window
  stderr - error messages written by system, normally associated with terminal window

Char Functions
  getc() - read a single char from a file
    int fgetc(FILE *stream);
    can return a special value of EOF, indicates end of file
    
    FILE *file = fopen("data", "r");
    
    int i = 0;
    
    i = getc(file);
    
    while (i != EOF) {
        printf("%d ", i - '0');
        i = getc(file);
    }
   
    fclose(file);
    
    ch = getc(stdin) // can read in from user
    
  getchar() - like getc() but only can read from stdin
    int getchar(void);
    
    printf("%c\n", getchar());
    
    //can use getchar() with EOF and a keyboard EOF ctrl-d or ctrl-z to simulate end of file
    
    int ch = 0;
    
    while ((ch = getchar()) != EOF) { printf("%c\n", ch); }
    
  fgetc() - reads char from a file and moves file pointer position 
    int fgetc(FILE *stream);
    
    FILE *fp = NULL;
    
    fp = fopen("file", "r")
    
    int i;
    
    while (1) {
      i = fgetc(fp);
      
      if (i == EOF) { break;}
      
      printf("%d", i);
    }
    
    fclose(fp)
     
  ungetc() - put char just read back into the input stream, read input char by char, but dont know how many make up unit
    int ungetc(int ch, FILE* stream);
    
    char ch = 0;
    while (isspace(ch = (char)getchar())); //read as long as there are spaces
    ungetc(ch, stdin); //put back the non space char
    printf("%c\n", getchar()); 
    
  putc() - write a single character to a file, writes a newline
    int putc(int char, FILE *stream);
    
    int ch = 0;
    
    FILE *fp = NULL;
    FILE *fp2 = NULL;
    
    fp = fopen("data", "r");
    fp2 = fopen("data2", "w");
    
    ch = getc(fp);
    
    while (ch != EOF) {
      putc(ch, fp2);
      ch = getc(fp);
    }
    
    fclose(fp);
    fclose(fp2);
    
  putchar() - goes to stdout
    int putchar(int c);
    
    //parses out newline
    char string[] = "Hello World, \nHello Jake";
    
    int i = 0;
    
    while (string[i] != '\0') {
      if (string[i] != '\n') {
        putchar(string[i]);
      }
      i++;
    }
    
    //like concatenation
    int ch;
    
    while ((ch = getchar()) != EOF){
      putchar(ch);
    }
    
    ungetc(ch, stdin);
    
    printf(" Thank you\n");
  
  fputc() = writes single char at a time into a file, moves file position
    int fputc(int char, FILE *stream);
    
    FILE *fp = NULL;
    
    char c = '\0';
    
    fp = fopen("file", "w");
    
    for (c = 'A'; c <= 'Z'; c++) {
      fputc(c, fp);
      //fputc(c, stdout);
    }
    
    fclose(fp);
  
String Functions

Formatting Functions
